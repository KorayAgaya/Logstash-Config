input {
 
  udp {
    codec => "json"
    port => 5515
    tags => ["windows","nxlog"]
    type => "nxlog-json"
  }
 
} # end input
 
filter {
    json {
      source => "json_message[0]"
     }
}  # end filter

filter {
 
    if [type] == "nxlog-json" {
    
    date {
      match => ["[EventTime]", "YYYY-MM-dd HH:mm:ss"]
      timezone => "Europe/Istanbul"
    }

    mutate {
            # Lowercase some values that are always in uppercase
            lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
    }

    mutate {
            # Set source to what the message says
            rename => [ "Hostname", "@source_host" ]
    }

    mutate {
        rename => [ "AccountName", "[eventlog][user]" ]
        rename => [ "AccountType", "[eventlog][account_type]" ]
        rename => [ "ActivityId", "[eventlog][activity_id]" ]
        rename => [ "AdapterName", "[eventlog][adapter_name]" ]
        rename => [ "AdapterSuffixName", "[eventlog][adapter_suffix_name]" ]
        rename => [ "Address", "ip6" ]
        rename => [ "ApplicationPath", "[eventlog][application_path]" ]
        rename => [ "AuthenticationPackageName", "[eventlog][authentication_package_name]" ]
        rename => [ "Category", "[eventlog][category]" ]
        rename => [ "Channel", "[eventlog][channel]" ]
        rename => [ "ConnType", "[eventlog][conn_type]" ]
        rename => [ "ClientIP", "[eventlog][client_ip]" ]
        rename => [ "DnsServerList", "[eventlog][dns_server_list]" ]
        rename => [ "Domain", "domain" ]
        rename => [ "EventID", "[eventlog][event_id]" ]
        rename => [ "EventType", "[eventlog][event_type]" ]
        rename => [ "File", "[eventlog][file_path]" ]
        rename => [ "Guid", "[eventlog][guid]" ]
        rename => [ "Hostname", "hostname" ]
        rename => [ "Interface", "[eventlog][interface]" ]
        rename => [ "InterfaceGuid", "[eventlog][interface_guid]" ]
        rename => [ "InterfaceName", "[eventlog][interface_name]" ]
        rename => [ "IpAddress", "ip" ]
        rename => [ "IpPort", "port" ]
        rename => [ "Key", "[eventlog][key]" ]
        rename => [ "LogonGuid", "[eventlog][logon_guid]" ]
        rename => [ "ModifyingUser", "[eventlog][modifying_user]" ]
        rename => [ "NewProfile", "[eventlog][new_profile]" ]
        rename => [ "OldProfile", "[eventlog][old_profile]" ]
        rename => [ "Port", "port" ]
        rename => [ "PrivilegeList", "[eventlog][privilege_list]" ]
        rename => [ "ProcessID", "[eventlog][process_id]" ]
        rename => [ "roleId", "[eventlog][role_id]" ]
        rename => [ "ProcessName", "[eventlog][process_name]" ]
        rename => [ "ProviderGuid", "[eventlog][provider_guid]" ]
        rename => [ "ReasonCode", "[eventlog][reason_code]" ]
        rename => [ "RecordNumber", "[eventlog][record_number]" ]
        rename => [ "ScenarioId", "[eventlog][scenario_id]" ]
        rename => [ "Severity", "level" ]
        rename => [ "SeverityValue", "[eventlog][severity_code]" ]
        rename => [ "SourceModuleName", "nxlog_input" ]
        rename => [ "SourceName", "[eventlog][program]" ]
        rename => [ "SubjectDomainName", "[eventlog][subject_domain_name]" ]
        rename => [ "SubjectLogonId", "[eventlog][subject_logonid]" ]
        rename => [ "SubjectUserName", "[eventlog][subject_user_name]" ]
        rename => [ "SubjectUserSid", "[eventlog][subject_user_sid]" ]
        rename => [ "System", "[eventlog][system]" ]
        rename => [ "TargetDomainName", "[eventlog][target_domain_name]" ]
        rename => [ "TargetLogonId", "[eventlog][target_logonid]" ]
        rename => [ "TargetUserName", "[eventlog][target_user_name]" ]
        rename => [ "TargetUserSid", "[eventlog][target_user_sid]" ]
        rename => [ "TotalXPaths"  ,    "[eventlog][total_xpaths]" ]
        rename => [ "ThreadID", "thread" ]
        rename => [ "ObjectName", "[eventlog][FilePath]" ]
        rename => [ "ObjectNameSub", "[eventlog][FilePathSub]" ]
        rename => [ "Message", "message" ] 
    }

    mutate {
        remove_field => [
                    "CurrentOrNextState",
                    "Description",
                    "EventReceivedTime",
                    "EventTime",
                    "EventTimeWritten",
                    "IPVersion",
                    "KeyLength",
                    "Keywords",
                    "LmPackageName",
                    "LogonProcessName",
                    "LogonType",
                    "Name",
                    "Opcode",
                    "OpcodeValue",
                    "PolicyProcessingMode",
                    "Protocol",
                    "ProtocolType",
                    "SourceModuleType",
                    "State",
                    "Task",
                    "TransmittedServices",
                    "Type",
                    "UserID",
                    "Version"
                    ]
    }

    if [eventlog_id] == 4624 {
            mutate {
                add_tag => [ "ad-logon-success" ]
            }
        }

        if [eventlog_id] == 4634 {
            mutate {
                add_tag => [ "ad-logoff-success" ]
            }
        }

        if [eventlog_id] == 4771 or [eventlog_id] == 4625 or [eventlog_id] == 4769 {
            mutate {
                add_tag => [ "ad-logon-failure" ]
            }
        }

        if [eventlog_id] == 4723 {
            mutate {
                add_tag => [ "ad-password-change" ]
            }
        }

        if [eventlog_id] == 4724 {
            mutate {
                add_tag => [ "ad-password-reset" ]
            }
        }

        if "ad-logon-success" in [tags] {
            metrics {
                add_tag => [ "drop", "metric", "ad-logon-success" ]
                meter => "ad-logon-success-metric"
            }
        }

        if "ad-logon-failure" in [tags] {
            metrics {
                add_tag => [ "drop", "metric", "ad-logon-failure" ]
                meter => "ad-logon-failure-metric"
            }
        }
        
    } 
}

output {
        if "drop" not in [tags] {
        # For debugging purposes!
        stdout {
          codec => "plain"
        }
    }
} # end output
